package com.chemart.aero;


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;



//import java.util.concurrent.TimeUnit;



import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentUris;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
//import android.widget.Toast;
import android.widget.Toast;


@SuppressLint("SdCardPath")
public class MainActivity extends Activity implements OnPreparedListener,
    OnCompletionListener {
	final int MENU_QUIT_ID = 2;
	
  final String LOG_TAG = "myLogs";

  final String DATA_HTTP = "http://aquarium.lipetsk.ru/MESTA/mp3/Aerostat/Aerostat_vol_";
  final String DATA_SD = Environment
     .getExternalStorageDirectory() + "/Aero";
  final Uri DATA_URI = ContentUris
      .withAppendedId(
          android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
          13359);
  MediaPlayer mediaPlayer;
  AudioManager am;
  CheckBox chbLoop;
  TextView Tv;
  String match;
  EditText edit;
  String boris;
  String PATHSdcard = "/sdcard/Aero/"; 
  ProgressDialog pd;
  Handler h;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    am = (AudioManager) getSystemService(AUDIO_SERVICE);
    
  
    //chbLoop = (CheckBox) findViewById(R.id.chbLoop);
   // chbLoop.setOnCheckedChangeListener(new OnCheckedChangeListener() {
    //  @Override
     // public void onCheckedChanged(CompoundButton buttonView,
      //    boolean isChecked) {
       // if (mediaPlayer != null)
        //  mediaPlayer.setLooping(isChecked);
      //}
    //});
  
  }
  

  
    public void onClickStart(View view) {
    	
    //	MyTask mt;	
    releaseMP();
    edit = (EditText) findViewById(R.id.editText1);
    match = edit.getText().toString();
    boris = match+"/Boris%20Grebenshchikov%20-%20Aerostat%20Radio%20vol."+match+".mp3";
	      Tv = (TextView) findViewById(R.id.textView1);
 	  Tv.setText("Aerostat № "+match);
 	
 
    try {
      switch (view.getId()) {
      case R.id.btnStartHttp:
     	  Log.d(LOG_TAG, "start HTTP");
    	  mediaPlayer = new MediaPlayer();
        mediaPlayer.setDataSource(DATA_HTTP+boris);
        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
        Log.d(LOG_TAG, "prepareAsync");
        mediaPlayer.setOnPreparedListener((OnPreparedListener) this);
        mediaPlayer.prepareAsync();
        break;
        case R.id.btnStartSD:
       
        	 
        	downloadFile(DATA_HTTP+boris);
                	    	
         //Log.d(LOG_TAG, "start SD");
        break;
        case R.id.button1:
        	java.io.File file = new java.io.File(PATHSdcard, match+".mp3");
        	//File file = getBaseContext().getFileStreamPath(PATHSdcard+match+".mp3");
        	  //          + File.separator + "Aero"
        	if(file.exists())
        	{
        		mediaPlayer = new MediaPlayer();
            mediaPlayer.setDataSource(DATA_SD+"/"+match+".mp3");
            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
            mediaPlayer.prepare();
            mediaPlayer.start();
        	}
            else{ 
            	Toast.makeText(MainActivity.this, "File not found", Toast.LENGTH_SHORT).show();
            }
        	            break;

      }

    } catch (IOException e) {
      e.printStackTrace();
    }
    if (mediaPlayer == null)
      return;

    //mediaPlayer.setLooping(chbLoop.isChecked());
    mediaPlayer.setOnCompletionListener((OnCompletionListener) this);
  }

    private void downloadFile(String url) {
    	new AsyncTask<String, Integer, File>() {

    	final ProgressDialog progressDialog = new ProgressDialog(MainActivity.this);
    	private Exception m_error = null;
    	
        @Override
        protected void onPreExecute() {
          
        	
        	progressDialog.setMessage("Downloading ...");
            progressDialog.setCancelable(false);
            progressDialog.setMax(100);
            progressDialog
              .setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
         
            progressDialog.show();
        	Toast.makeText(MainActivity.this, "Start download", Toast.LENGTH_SHORT).show();
        }
    @Override
        protected File doInBackground(String... params) {
        	URL url;
            HttpURLConnection urlConnection;
            InputStream inputStream;
            int totalSize;
            int downloadedSize;
            byte[] buffer;
            int bufferLength;
         
            File file = null;
            FileOutputStream fos = null;
         
            try {
             url = new URL(params[0]);
             urlConnection = (HttpURLConnection) url.openConnection();
         
             urlConnection.setRequestMethod("GET");
             urlConnection.setDoOutput(true);
             urlConnection.connect();
         
             file = File.createTempFile("Mustachify", "download");
             fos = new FileOutputStream(file);
             inputStream = urlConnection.getInputStream();
         
             totalSize = urlConnection.getContentLength();
             downloadedSize = 0;
         
             buffer = new byte[1024];
             bufferLength = 0;
         
             // читаем со входа и пишем в выход, 
             // с каждой итерацией публикуем прогресс
             while ((bufferLength = inputStream.read(buffer)) > 0) {
              fos.write(buffer, 0, bufferLength);
              downloadedSize += bufferLength;
              publishProgress(downloadedSize, totalSize);
             }
         
             fos.close();
             inputStream.close();
         
             return file;
            } catch (MalformedURLException e) {
             e.printStackTrace();
             m_error = e;
            } catch (IOException e) {
             e.printStackTrace();
             m_error = e;
            }
         
            return null;
           }
      

        protected void onProgressUpdate(Integer... values) {
            progressDialog.setProgress((int) ((values[0] / (float) values[1]) * 100));
           };
           @Override
           protected void onPostExecute(File file) {
            // отображаем сообщение, если возникла ошибка
            if (m_error != null) {
             m_error.printStackTrace();
             return;
            }
            // закрываем прогресс и удаляем временный файл
            progressDialog.hide();
            file.delete();
            Toast.makeText(MainActivity.this, "Download finished", Toast.LENGTH_LONG).show();
           }

    }.execute(url);
    }
  private void releaseMP() {
    if (mediaPlayer != null) {
      try {
        mediaPlayer.release();
        mediaPlayer = null;
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
  }
  

  //public void DownloadFile(String fileURL, String fileName) {
    //  try {
      //    String RootDir = Environment.getExternalStorageDirectory()
        //          + File.separator + "Aero";
         // File RootFile = new File(RootDir);
          //RootFile.mkdir();
          // File root = Environment.getExternalStorageDirectory();
          //URL u = new URL(fileURL);
          //HttpURLConnection c = (HttpURLConnection) u.openConnection();
          //c.setRequestMethod("GET");
          //c.setDoOutput(true);
          //c.connect();
          //FileOutputStream f = new FileOutputStream(new File(RootFile,
            //      fileName));
          //InputStream in = c.getInputStream();
          //byte[] buffer = new byte[1024];
          //int len1 = 0;

          //while ((len1 = in.read(buffer)) > 0) {                          
           //   f.write(buffer, 0, len1);               
          //}       
          //f.close();
          

      //} catch (Exception e) {

        //  Log.d("Error....", e.toString());
     // }

  //}
  public void onClick(View view) {
    if (mediaPlayer == null)
      return;
    switch (view.getId()) {
    case R.id.btnPause:
      if (mediaPlayer.isPlaying())
        mediaPlayer.pause();
      break;
    case R.id.btnResume:
      if (!mediaPlayer.isPlaying())
        mediaPlayer.start();
      break;
    case R.id.btnStop:
      mediaPlayer.stop();
      break;
    case R.id.btnBackward:
      mediaPlayer.seekTo(mediaPlayer.getCurrentPosition() - 3000);
      break;
    case R.id.btnForward:
      mediaPlayer.seekTo(mediaPlayer.getCurrentPosition() + 3000);
      break;
   

    }
  }

  public void onPrepared(MediaPlayer mp) {
    Log.d(LOG_TAG, "onPrepared");
    mp.start();
  }

  public void onCompletion(MediaPlayer mp) {
    Log.d(LOG_TAG, "onCompletion");
  }

  protected void onDestroy() {
    super.onDestroy();
    releaseMP();
  }
//создание меню
public boolean onCreateOptionsMenu(Menu menu) {
//TODO Auto-generated method stub
menu.add(0, MENU_QUIT_ID, 0, "Quit");
return super.onCreateOptionsMenu(menu);
}

//обработка нажатий на пункты меню
@SuppressWarnings("unused")
public boolean onOptionsItemSelected(MenuItem item) {
//TODO Auto-generated method stub
 MENU_QUIT_ID:
//выход из приложения
finish();

return super.onOptionsItemSelected(item);
}

}
    

